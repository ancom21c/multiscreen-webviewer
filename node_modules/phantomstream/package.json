{
  "name": "phantomstream",
  "description": "Streaming interface to the PhantomJS headless browser",
  "version": "0.0.1",
  "author": {
    "name": "Matt Pizzimenti"
  },
  "email": "mjpizz@gmail.com",
  "url": "https://github.com/mjpizz/phantomstream",
  "dependencies": {
    "temp": "*",
    "coffee-script": "*"
  },
  "directories": {
    "ext": "./ext"
  },
  "main": "./phantomstream",
  "readme": "# phantomstream\n\nWrite and automate [PhantomJS](http://phantomjs.org) scripts inside node, using\na standard [Stream](http://nodejs.org/api/stream.html) interface.\n\n# Getting Started\n\nFirst off, install the `phantomstream` module.\n\n    npm install phantomstream\n\nNext, create a simple script named \"myscript.js\".\n\n```javascript\nphantomstream = require(\"../phantomstream\")\n\n// Open up a PhantomJS stream that listens for commands that look like\n// \"TITLE <url>\". Browse to the URL and write the title back via the stream.\nvar conf = {logger: console}\nvar ps = phantomstream.open(conf, function(nodestream, phantom, require, global) {\n\n  // This callback executes inside of PhantomJS, not node.  To see the API\n  // available to you in PhantomJS, check out their documentation:\n  // http://code.google.com/p/phantomjs/wiki/Interface\n  var page = require(\"webpage\").create()\n\n  // Listen for the \"TITLE <url>\" commands via the streaming interface.\n  nodestream.on(\"data\", function(data) {\n    var matches = /TITLE\\s*(.+)/.exec(data)\n    if (matches) {\n      var url = matches[1]\n\n      // Got a TITLE command, use the PhantomJS page object to browse\n      // to that page, get the document title, and write it back to the stream.\n      console.info(\"opening\", url)\n      page.open(url, function() {\n        var title = page.evaluate(function() {\n          return document.title\n        })\n        console.info(\"sending title =\", title)\n        nodestream.write(title)\n      })\n    }\n  })\n\n})\n\n// Send an TITLE command to our PhantomJS process and echo the response.\nps.write(\"TITLE http://www.google.com\")\nps.on(\"data\", function(data) {\n  console.info(\"node received:\", data.toString())\n  process.exit()\n})\n```\n\nRun your script with node.\n\n    node myscript.js\n\n...you should see output like this:\n\n    [phantom-stdout] opening http://www.google.com\n    [phantom-stdout] sending title = Google\n    node received: Google\n\nEnjoy! For more ideas on what is possible inside the callback for\n`phantomstream.open()`, read the\n[PhantomJS documentation](http://code.google.com/p/phantomjs/wiki/Interface).\n\nDon't forget try out some demos from the `examples/` directory :)\n\n# Alternatives\n\nIf you are looking for higher-level implementations that wrap the PhantomJS API,\ncheck these out:\n\n* [phantomjs-node](https://github.com/sgentle/phantomjs-node)\n* [node-phantomjs-sync](https://github.com/sebv/node-phantomjs-sync)\n",
  "readmeFilename": "README.md",
  "_id": "phantomstream@0.0.1",
  "_shasum": "dd0cb4a78319912c0a09d2791686bdf9bf8111f2",
  "_from": "phantomstream@",
  "_resolved": "https://registry.npmjs.org/phantomstream/-/phantomstream-0.0.1.tgz"
}
